generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String    @id @default(cuid())
  email       String    @unique
  password    String
  role        UserRole  @default(ADMIN)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  lastLogin   DateTime?
  lastLoginIp String?
  documents   Document[]

  @@map("users")
}

model Employee {
  id              String             @id @default(cuid())
  name            String
  phone           String?
  email           String?
  address         String?
  dateOfJoining   DateTime?
  uniqueSlug      String             @unique
  profilePhotoUrl String?
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  attendance      Attendance[]
  documents       EmployeeDocument[]
  payments        Payment[]

  @@map("employees")
}

model EmployeeDocument {
  id         String       @id @default(cuid())
  employeeId String
  type       DocumentType
  fileName   String
  fileUrl    String
  uploadedAt DateTime     @default(now())
  employee   Employee     @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@map("employee_documents")
}

model Payment {
  id               String      @id @default(cuid())
  employeeId       String
  type             PaymentType
  amount           Float
  description      String?
  date             DateTime
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  clearedPaymentId String?
  clearedPayment   Payment?    @relation("PaymentClearing", fields: [clearedPaymentId], references: [id])
  clearingPayments Payment[]   @relation("PaymentClearing")
  employee         Employee    @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model Attendance {
  id         String   @id @default(cuid())
  employeeId String
  month      Int
  year       Int
  daysWorked Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@unique([employeeId, month, year])
  @@map("attendance")
}

model Client {
  id            String          @id @default(cuid())
  companyName   String
  gstNumber     String?
  panNumber     String?
  addressLine1  String
  addressLine2  String?
  addressLine3  String?
  city          String?
  state         String?
  pinCode       String?
  contactPerson String?
  email         String?
  phone         String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  payments      ClientPayment[]
  invoices      Invoice[]

  @@map("clients")
}

model Invoice {
  id         String   @id @default(cuid())
  clientName String
  amount     Float
  date       DateTime
  fileName   String
  fileUrl    String
  uploadedAt DateTime @default(now())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  clientId   String?
  client     Client?  @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@map("invoices")
}

model ClientPayment {
  id          String   @id @default(cuid())
  clientId    String
  amount      Float
  description String?
  date        DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  client      Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@map("client_payments")
}

model PfEsiChallan {
  id         String      @id @default(cuid())
  month      Int
  year       Int
  type       ChallanType
  fileName   String
  fileUrl    String
  uploadedBy String
  uploadedAt DateTime    @default(now())
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@map("pf_esi_challans")
}

enum UserRole {
  ADMIN
  ACCOUNTANT
}

enum DocumentType {
  PROFILE_PHOTO
  AADHAR_CARD
  MEDICAL_CERTIFICATE
  PF_DETAILS
  ESI_DETAILS
}

enum PaymentType {
  DUE
  ADVANCE
  DUE_CLEARED
  ADVANCE_REPAID
}

enum ChallanType {
  PF
  ESI
}

model Document {
  id          String       @id @default(cuid())
  title       String
  description String?
  fileName    String
  fileUrl     String
  fileSize    Int?
  mimeType    String?
  category    DocumentCategory @default(GENERAL)
  uploadedBy  String
  uploadedFor String?      // Optional: specific user/employee this document is for
  tags        String[]     // Array of tags for categorization
  isPublic    Boolean      @default(false) // Public documents visible to all users
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  uploader    User         @relation(fields: [uploadedBy], references: [id], onDelete: Cascade)

  @@map("documents")
}

enum DocumentCategory {
  GENERAL
  FINANCIAL
  LEGAL
  HR
  COMPLIANCE
  CONTRACTS
  INVOICES
  REPORTS
  POLICIES
  CERTIFICATES
}
