name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  GOOGLE_CLOUD_PROJECT: 'apexsolar-app'
  GOOGLE_CLOUD_REGION: 'asia-south1'
  SERVICE_NAME: 'apexsolar'
  ARTIFACT_REGISTRY_REGION: 'asia-south1'
  ARTIFACT_REGISTRY_REPO: 'apexsolar-repo'

jobs:
  # Lint and Code Quality Check
  lint:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci --legacy-peer-deps
    
    - name: Run ESLint
      run: npx eslint . --ext .js,.jsx,.ts,.tsx --config eslint.config.mjs --max-warnings 100
    
    - name: TypeScript check
      run: npx tsc --noEmit

  # Security Scan
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci --legacy-peer-deps
    
    - name: Run npm audit
      run: npm audit --audit-level=high --production
    
    - name: Dependency vulnerabilities check
      run: npm audit --audit-level=critical --production

  # Unit and Integration Tests
  test:
    name: Unit & Integration Tests
    runs-on: ubuntu-latest
    needs: [lint]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: apexsolar_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci --legacy-peer-deps
    
    - name: Generate Prisma client
      run: npm run db:generate
    
    - name: Setup test database
      run: npm run db:push
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/apexsolar_test
    
    - name: Seed test database
      run: npm run db:seed
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/apexsolar_test
    
    - name: Make test scripts executable
      run: chmod +x ./tests/*.sh
    
    - name: Build application for testing
      run: npm run build
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/apexsolar_test
        JWT_SECRET: test-jwt-secret-for-github-actions
        NEXTAUTH_SECRET: test-nextauth-secret-for-github-actions
        NEXTAUTH_URL: http://localhost:3000
        NODE_ENV: test
    
    - name: Start test server in background
      run: |
        npm start &
        echo $! > server.pid
        # Wait for server to start
        sleep 10
        curl --retry 5 --retry-delay 2 --retry-connrefused http://localhost:3000/api/health || echo "Server startup check failed"
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/apexsolar_test
        JWT_SECRET: test-jwt-secret-for-github-actions
        NEXTAUTH_SECRET: test-nextauth-secret-for-github-actions
        NEXTAUTH_URL: http://localhost:3000
        NODE_ENV: test
        PORT: 3000
    
    - name: Run Shell Script Tests
      run: ./tests/minimal-test-suite.sh
      env:
        TEST_BASE_URL: http://localhost:3000
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/apexsolar_test
        JWT_SECRET: test-jwt-secret-for-github-actions
        NEXTAUTH_SECRET: test-nextauth-secret-for-github-actions
        NEXTAUTH_URL: http://localhost:3000
        NODE_ENV: test
    
    - name: Stop test server
      run: |
        if [ -f server.pid ]; then
          kill $(cat server.pid) || echo "Server already stopped"
          rm server.pid
        fi
      if: always()
    
    - name: Upload test coverage
      uses: codecov/codecov-action@v4
      if: always()
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella

  # Build and Test Docker Image
  build-docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [lint, test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GOOGLE_CLOUD_SERVICE_ACCOUNT_KEY }}
    
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ env.GOOGLE_CLOUD_PROJECT }}
    
    - name: Verify project and list repositories
      run: |
        echo "Current project: $(gcloud config get-value project)"
        echo "Listing Artifact Registry repositories:"
        gcloud artifacts repositories list --location=${{ env.ARTIFACT_REGISTRY_REGION }} || echo "No repositories or permission issues"
    
    - name: Create Artifact Registry repository if not exists
      run: |
        echo "Checking for repository: ${{ env.ARTIFACT_REGISTRY_REPO }} in location: ${{ env.ARTIFACT_REGISTRY_REGION }}"
        
        # Check if repository exists, create if not
        if gcloud artifacts repositories describe ${{ env.ARTIFACT_REGISTRY_REPO }} \
          --location=${{ env.ARTIFACT_REGISTRY_REGION }} >/dev/null 2>&1; then
          echo "✅ Repository already exists"
        else
          echo "Repository doesn't exist. Attempting to create..."
          if gcloud artifacts repositories create ${{ env.ARTIFACT_REGISTRY_REPO }} \
            --repository-format=docker \
            --location=${{ env.ARTIFACT_REGISTRY_REGION }} \
            --description="Repository for ApexSolar application"; then
            echo "✅ Repository created successfully"
          else
            echo "❌ Failed to create repository, but continuing anyway..."
            echo "Repository might already exist or permissions might be insufficient."
            echo "The workflow will attempt to use the repository regardless."
          fi
        fi
    
    - name: Configure Docker for Artifact Registry
      run: |
        gcloud auth configure-docker ${{ env.ARTIFACT_REGISTRY_REGION }}-docker.pkg.dev
        # Also configure GCR as fallback
        gcloud auth configure-docker gcr.io
    
    - name: Build Docker image
      run: |
        IMAGE_URI="${{ env.ARTIFACT_REGISTRY_REGION }}-docker.pkg.dev/${{ env.GOOGLE_CLOUD_PROJECT }}/${{ env.ARTIFACT_REGISTRY_REPO }}/${{ env.SERVICE_NAME }}"
        docker build -t ${IMAGE_URI}:${{ github.sha }} .
        docker build -t ${IMAGE_URI}:latest .
    
    - name: Test Docker image
      run: |
        IMAGE_URI="${{ env.ARTIFACT_REGISTRY_REGION }}-docker.pkg.dev/${{ env.GOOGLE_CLOUD_PROJECT }}/${{ env.ARTIFACT_REGISTRY_REPO }}/${{ env.SERVICE_NAME }}"
        
        # Test that the image can start
        docker run --rm -d --name test-container \
          -p 3000:3000 \
          -e NODE_ENV=production \
          ${IMAGE_URI}:${{ github.sha }}
        
        sleep 10
        
        # Basic health check
        if curl -f http://localhost:3000/api/health; then
          echo "✅ Docker image health check passed"
        else
          echo "❌ Docker image health check failed"
          docker logs test-container
          exit 1
        fi
        
        docker stop test-container
    
    - name: Push Docker image to Artifact Registry
      run: |
        IMAGE_URI="${{ env.ARTIFACT_REGISTRY_REGION }}-docker.pkg.dev/${{ env.GOOGLE_CLOUD_PROJECT }}/${{ env.ARTIFACT_REGISTRY_REPO }}/${{ env.SERVICE_NAME }}"
        docker push ${IMAGE_URI}:${{ github.sha }}
        docker push ${IMAGE_URI}:latest
    
    - name: Upload Docker image metadata
      uses: actions/upload-artifact@v4
      with:
        name: docker-metadata
        path: |
          Dockerfile

  # Deploy to Google Cloud Run (Production)
  deploy-production:
    name: Deploy to Production (Google Cloud Run)
    runs-on: ubuntu-latest
    needs: [lint, security, test, build-docker]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GOOGLE_CLOUD_SERVICE_ACCOUNT_KEY }}
    
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ env.GOOGLE_CLOUD_PROJECT }}
    
    - name: Deploy to Cloud Run from Artifact Registry
      run: |
        IMAGE_URI="${{ env.ARTIFACT_REGISTRY_REGION }}-docker.pkg.dev/${{ env.GOOGLE_CLOUD_PROJECT }}/${{ env.ARTIFACT_REGISTRY_REPO }}/${{ env.SERVICE_NAME }}"
        
        gcloud run deploy ${{ env.SERVICE_NAME }} \
          --image=${IMAGE_URI}:${{ github.sha }} \
          --region=${{ env.GOOGLE_CLOUD_REGION }} \
          --platform=managed \
          --allow-unauthenticated \
          --set-env-vars="DATABASE_URL=${{ secrets.DATABASE_URL }}" \
          --set-env-vars="JWT_SECRET=${{ secrets.JWT_SECRET }}" \
          --set-env-vars="NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }}" \
          --set-env-vars="NEXTAUTH_URL=${{ secrets.NEXTAUTH_URL }}" \
          --set-env-vars="NODE_ENV=production" \
          --set-env-vars="GOOGLE_CLOUD_PROJECT_ID=${{ env.GOOGLE_CLOUD_PROJECT }}" \
          --set-env-vars="GCS_BUCKET_NAME=${{ secrets.GCS_BUCKET_NAME }}" \
          --set-env-vars="ADMIN_EMAIL=${{ secrets.ADMIN_EMAIL }}" \
          --set-env-vars="ADMIN_PASSWORD=${{ secrets.ADMIN_PASSWORD }}" \
          --set-env-vars="GOOGLE_APPLICATION_CREDENTIALS=/app/apexsolar-storage-key.json" \
          --cpu=1 \
          --memory=1Gi \
          --max-instances=10 \
          --min-instances=1 \
          --timeout=300s \
          --port=3000 \
          --concurrency=80
    
    - name: Get service URL
      run: |
        SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} \
          --region=${{ env.GOOGLE_CLOUD_REGION }} \
          --format='value(status.url)')
        echo "Service deployed at: $SERVICE_URL"
        echo "SERVICE_URL=$SERVICE_URL" >> $GITHUB_ENV
    
    - name: Update Cloud Run traffic
      run: |
        gcloud run services update-traffic ${{ env.SERVICE_NAME }} \
          --region=${{ env.GOOGLE_CLOUD_REGION }} \
          --to-latest

  # Post-deployment Health Check
  health-check:
    name: Post-deployment Health Check
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GOOGLE_CLOUD_SERVICE_ACCOUNT_KEY }}
    
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ env.GOOGLE_CLOUD_PROJECT }}
    
    - name: Wait for deployment
      run: sleep 30
    
    - name: Health check
      run: |
        # Get the service URL
        SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} \
          --region=${{ env.GOOGLE_CLOUD_REGION }} \
          --format='value(status.url)')
        
        HEALTH_URL="${SERVICE_URL}/api/health"
        echo "Checking health at: $HEALTH_URL"
        
        # Try health check with retries
        for i in {1..5}; do
          if curl -f -s "$HEALTH_URL" > /dev/null; then
            echo "✅ Health check passed on attempt $i"
            curl -s "$HEALTH_URL" | jq . || curl -s "$HEALTH_URL"
            exit 0
          else
            echo "❌ Health check failed on attempt $i, retrying in 10s..."
            sleep 10
          fi
        done
        
        echo "❌ Health check failed after 5 attempts"
        exit 1

  # Staging Deployment (for develop branch)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [lint, security, test, build-docker]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GOOGLE_CLOUD_SERVICE_ACCOUNT_KEY }}
    
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ env.GOOGLE_CLOUD_PROJECT }}
    
    - name: Deploy to Cloud Run (Staging)
      run: |
        IMAGE_URI="${{ env.ARTIFACT_REGISTRY_REGION }}-docker.pkg.dev/${{ env.GOOGLE_CLOUD_PROJECT }}/${{ env.ARTIFACT_REGISTRY_REPO }}/${{ env.SERVICE_NAME }}"
        
        gcloud run deploy ${{ env.SERVICE_NAME }}-staging \
          --image=${IMAGE_URI}:${{ github.sha }} \
          --region=${{ env.GOOGLE_CLOUD_REGION }} \
          --platform=managed \
          --allow-unauthenticated \
          --set-env-vars="DATABASE_URL=${{ secrets.STAGING_DATABASE_URL }}" \
          --set-env-vars="JWT_SECRET=${{ secrets.JWT_SECRET }}" \
          --set-env-vars="NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }}" \
          --set-env-vars="NEXTAUTH_URL=${{ secrets.STAGING_URL }}" \
          --set-env-vars="NODE_ENV=staging" \
          --set-env-vars="GOOGLE_CLOUD_PROJECT_ID=${{ env.GOOGLE_CLOUD_PROJECT }}" \
          --set-env-vars="GCS_BUCKET_NAME=${{ secrets.STAGING_GCS_BUCKET_NAME }}" \
          --set-env-vars="ADMIN_EMAIL=${{ secrets.ADMIN_EMAIL }}" \
          --set-env-vars="ADMIN_PASSWORD=${{ secrets.ADMIN_PASSWORD }}" \
          --set-env-vars="GOOGLE_APPLICATION_CREDENTIALS=/app/apexsolar-storage-key.json" \
          --cpu=1 \
          --memory=512Mi \
          --max-instances=5 \
          --min-instances=0 \
          --timeout=300s \
          --port=3000 \
          --concurrency=80
    
    - name: Get staging service URL
      run: |
        STAGING_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }}-staging \
          --region=${{ env.GOOGLE_CLOUD_REGION }} \
          --format='value(status.url)')
        echo "Staging service deployed at: $STAGING_URL"
        echo "STAGING_URL=$STAGING_URL" >> $GITHUB_ENV
        
        # Store for use in other workflows
        echo "Staging URL: $STAGING_URL"
        echo "💡 Set this URL as STAGING_URL secret in repository settings"
    
    - name: Staging health check
      run: |
        # Get the staging service URL
        STAGING_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }}-staging \
          --region=${{ env.GOOGLE_CLOUD_REGION }} \
          --format='value(status.url)')
        
        HEALTH_URL="${STAGING_URL}/api/health"
        echo "Checking staging health at: $HEALTH_URL"
        
        # Wait for staging to be ready
        sleep 20
        
        # Try health check with retries
        for i in {1..3}; do
          if curl -f -s "$HEALTH_URL" > /dev/null; then
            echo "✅ Staging health check passed on attempt $i"
            echo "🎯 Staging environment ready for testing"
            exit 0
          else
            echo "❌ Staging health check failed on attempt $i, retrying in 10s..."
            sleep 10
          fi
        done
        
        echo "⚠️ Staging health check failed, but continuing (may be initialization delay)"

  # Run staging tests after staging deployment
  staging-tests:
    name: Test Staging Environment
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci --legacy-peer-deps
    
    - name: Make test scripts executable
      run: chmod +x ./tests/*.sh
    
    - name: Wait for staging to be ready
      run: |
        echo "⏳ Waiting for staging environment to stabilize..."
        sleep 30
    
    - name: Run comprehensive tests on staging
      run: ./tests/comprehensive-test-suite.sh
      env:
        BASE_URL: ${{ secrets.STAGING_URL || 'https://apexsolar-staging-302444603160.asia-south1.run.app' }}
        CI_MODE: true
    
    - name: Run security tests on staging
      run: ./tests/security-test-suite.sh
      env:
        BASE_URL: ${{ secrets.STAGING_URL || 'https://apexsolar-staging-302444603160.asia-south1.run.app' }}
    
    - name: Cleanup staging test data
      if: always()
      run: |
        echo "🧹 Cleaning up staging test data..."
        ./production-cleanup.sh || echo "Cleanup completed with warnings"
      env:
        BASE_URL: ${{ secrets.STAGING_URL || 'https://apexsolar-staging-302444603160.asia-south1.run.app' }}
        CI_MODE: true
        ADMIN_PASSWORD: ${{ secrets.ADMIN_PASSWORD }}
