name: üöÄ Simple Deploy to Production

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '18'
  GOOGLE_CLOUD_PROJECT: 'apexsolar-app'
  GOOGLE_CLOUD_REGION: 'asia-south1'
  SERVICE_NAME: 'apexsolar'
  ARTIFACT_REGISTRY_REGION: 'asia-south1'
  ARTIFACT_REGISTRY_REPO: 'apexsolar-repo'

jobs:
  # Run local tests first
  test:
    name: Local Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci --legacy-peer-deps
    
    - name: Run ESLint
      run: npx eslint . --ext .js,.jsx,.ts,.tsx --config eslint.config.mjs --max-warnings 100
    
    - name: TypeScript check
      run: npx tsc --noEmit
    
    - name: Run unit tests
      run: npm test
    
    - name: Build application
      run: npm run build

  # Deploy to production (only on main branch push)
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci --legacy-peer-deps

    - name: Build application
      run: npm run build

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GOOGLE_CLOUD_SA_KEY }}

    - name: Setup Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ env.GOOGLE_CLOUD_PROJECT }}

    - name: Create Artifact Registry repository (if not exists)
      run: |
        gcloud artifacts repositories describe ${{ env.ARTIFACT_REGISTRY_REPO }} \
          --location=${{ env.ARTIFACT_REGISTRY_REGION }} || \
        gcloud artifacts repositories create ${{ env.ARTIFACT_REGISTRY_REPO }} \
          --repository-format=docker \
          --location=${{ env.ARTIFACT_REGISTRY_REGION }} \
          --description="Docker repository for ApexSolar app"

    - name: Configure Docker to use gcloud as credential helper
      run: gcloud auth configure-docker ${{ env.ARTIFACT_REGISTRY_REGION }}-docker.pkg.dev

    - name: Build and push Docker image
      run: |
        IMAGE_URI="${{ env.ARTIFACT_REGISTRY_REGION }}-docker.pkg.dev/${{ env.GOOGLE_CLOUD_PROJECT }}/${{ env.ARTIFACT_REGISTRY_REPO }}/${{ env.SERVICE_NAME }}:${{ github.sha }}"
        docker build -t $IMAGE_URI .
        docker push $IMAGE_URI
        echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV

    - name: Deploy to Cloud Run
      run: |
        gcloud run deploy ${{ env.SERVICE_NAME }} \
          --image=${{ env.IMAGE_URI }} \
          --region=${{ env.GOOGLE_CLOUD_REGION }} \
          --platform=managed \
          --allow-unauthenticated \
          --set-env-vars="DATABASE_URL=${{ secrets.DATABASE_URL }}" \
          --set-env-vars="NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }}" \
          --set-env-vars="NEXTAUTH_URL=${{ secrets.NEXTAUTH_URL }}" \
          --set-env-vars="GOOGLE_CLOUD_PROJECT_ID=${{ env.GOOGLE_CLOUD_PROJECT }}" \
          --set-env-vars="GOOGLE_CLOUD_BUCKET_NAME=${{ secrets.GOOGLE_CLOUD_BUCKET_NAME }}" \
          --set-env-vars="NODE_ENV=production" \
          --memory=2Gi \
          --cpu=2 \
          --min-instances=0 \
          --max-instances=10 \
          --timeout=300

    - name: Get service URL
      run: |
        SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} \
          --region=${{ env.GOOGLE_CLOUD_REGION }} \
          --format='value(status.url)')
        echo "Production deployed at: $SERVICE_URL"
        echo "üöÄ Deployment successful!"

  # Post-deployment verification
  verify:
    name: Verify Deployment
    runs-on: ubuntu-latest
    needs: [deploy]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Get service URL
      run: |
        gcloud auth activate-service-account --key-file=<(echo '${{ secrets.GOOGLE_CLOUD_SA_KEY }}')
        gcloud config set project ${{ env.GOOGLE_CLOUD_PROJECT }}
        SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} \
          --region=${{ env.GOOGLE_CLOUD_REGION }} \
          --format='value(status.url)')
        echo "SERVICE_URL=$SERVICE_URL" >> $GITHUB_ENV
    
    - name: Health check
      run: |
        sleep 30  # Wait for service to be ready
        echo "Testing health endpoint: ${{ env.SERVICE_URL }}/api/health"
        for i in {1..5}; do
          if curl -f -s "${{ env.SERVICE_URL }}/api/health" | grep -q '"status":"healthy"'; then
            echo "‚úÖ Health check passed on attempt $i"
            exit 0
          fi
          echo "‚è≥ Health check attempt $i failed, retrying in 30s..."
          sleep 30
        done
        echo "‚ùå Health check failed after 5 attempts"
        exit 1
