name: Deploy to Production

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'

jobs:
  test:
    name: Test Application
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: apexsolar_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Generate Prisma client
      run: npm run db:generate
    
    - name: Setup test database
      run: |
        npm run db:push
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/apexsolar_test
    
    - name: Run tests
      run: npm test
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/apexsolar_test
        JWT_SECRET: test-jwt-secret
        NEXTAUTH_SECRET: test-nextauth-secret
        NEXTAUTH_URL: http://localhost:3000
    
    - name: Run linting
      run: npm run lint
    
    - name: Build application
      run: npm run build
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/apexsolar_test
        JWT_SECRET: test-jwt-secret
        NEXTAUTH_SECRET: test-nextauth-secret
        NEXTAUTH_URL: http://localhost:3000

  deploy:
    name: Deploy to Production Server
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to Debian server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_KEY }}
        passphrase: ${{ secrets.PASSPHRASE }}  # Optional: only needed if SSH key has passphrase
        port: ${{ secrets.PORT }}
        script: |
          # Navigate to application directory
          cd /opt/apexsolar-app
          
          # Pull latest changes
          git pull origin main
          
          # Install dependencies
          npm ci --production
          
          # Generate Prisma client
          npx prisma generate
          
          # Run database migrations
          npx prisma db push
          
          # Build application
          npm run build
          
          # Restart application with PM2
          pm2 restart apexsolar-app || pm2 start ecosystem.config.js
          
          # Save PM2 configuration
          pm2 save
          
          # Check application status
          pm2 status apexsolar-app
