name: Deploy to Production

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    name: Test Application
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: apexsolar_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Generate Prisma client
      run: npm run db:generate
    
    - name: Setup test database
      run: |
        npm run db:push
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/apexsolar_test
    
    - name: Run linting
      run: npm run lint
    
    - name: Build application
      run: npm run build
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/apexsolar_test
        JWT_SECRET: test-jwt-secret
        NEXTAUTH_SECRET: test-nextauth-secret
        NEXTAUTH_URL: http://localhost:3000

  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, build-and-push]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to remote server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_KEY }}
        port: ${{ secrets.PORT }}
        script: |
          set -e
          
          # Navigate to application directory
          cd /opt/apexsolar-app
          
          # Pull latest changes from repository
          if [ -d ".git" ]; then
            git fetch origin main
            git reset --hard origin/main
          else
            git clone https://github.com/${{ github.repository }}.git .
          fi
          
          # Login to container registry and pull latest image
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          
          # Get server IP for NEXTAUTH_URL
          SERVER_IP=$(curl -s ifconfig.me || curl -s ipecho.net/plain || curl -s icanhazip.com)
          
          # Create/update production docker-compose file with pulled image
          cat > docker-compose.prod.yml << EOF
          version: '3.8'
          services:
            postgres:
              image: postgres:15-alpine
              environment:
                POSTGRES_USER: ${{ secrets.DB_USER }}
                POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD }}
                POSTGRES_DB: ${{ secrets.DB_NAME }}
              volumes:
                - postgres_data:/var/lib/postgresql/data
              restart: unless-stopped
              healthcheck:
                test: ["CMD-SHELL", "pg_isready -U ${{ secrets.DB_USER }}"]
                interval: 5s
                timeout: 5s
                retries: 5
              networks:
                - apexsolar-network
            
            app:
              image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
              ports:
                - "127.0.0.1:3000:3000"
              environment:
                DATABASE_URL: postgresql://${{ secrets.DB_USER }}:${{ secrets.DB_PASSWORD }}@postgres:5432/${{ secrets.DB_NAME }}
                JWT_SECRET: ${{ secrets.JWT_SECRET }}
                NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
                NEXTAUTH_URL: https://\${SERVER_IP}
                NODE_ENV: production
                UPLOAD_DIR: uploads
                MAX_FILE_SIZE: 5242880
                ADMIN_EMAIL: ${{ secrets.ADMIN_EMAIL }}
                ADMIN_PASSWORD: ${{ secrets.ADMIN_PASSWORD }}
              depends_on:
                postgres:
                  condition: service_healthy
              volumes:
                - ./uploads:/app/uploads
              restart: unless-stopped
              networks:
                - apexsolar-network
          
          volumes:
            postgres_data:
          
          networks:
            apexsolar-network:
              driver: bridge
          EOF
          
          # Create uploads directory if it doesn't exist
          mkdir -p uploads/{employees,invoices,challans}
          chmod -R 755 uploads
          
          # Stop existing containers and start new ones
          docker-compose -f docker-compose.prod.yml down || true
          docker-compose -f docker-compose.prod.yml up -d
          
          # Wait for services to be ready
          echo "Waiting for services to start..."
          sleep 45
          
          # Run database operations with retries
          for i in {1..3}; do
            if docker-compose -f docker-compose.prod.yml exec -T app npx prisma db push; then
              echo "Database migration successful"
              break
            else
              echo "Database migration attempt $i failed, retrying in 10 seconds..."
              sleep 10
            fi
          done
          
          # Seed database (optional, might fail if already seeded)
          docker-compose -f docker-compose.prod.yml exec -T app npx prisma db seed || echo "Database seeding skipped (may already exist)"
          
          # Check if application is healthy
          sleep 15
          if curl -k -s https://localhost/api/health | grep -q "healthy"; then
            echo "✅ Deployment successful - Application is healthy"
          else
            echo "⚠️ Deployment completed but health check failed"
          fi
