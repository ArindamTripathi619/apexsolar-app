name: üöÄ Build & Deploy to Production

on:
  push:
    branches: [main]

env:
  NODE_VERSION: '18'
  GOOGLE_CLOUD_PROJECT: 'apexsolar-app'
  GOOGLE_CLOUD_REGION: 'asia-south1'
  SERVICE_NAME: 'apexsolar'
  ARTIFACT_REGISTRY_REGION: 'asia-south1'
  ARTIFACT_REGISTRY_REPO: 'apexsolar-repo'

jobs:
  # Deploy to production (only on main branch push)
  deploy:
    name: Build and Deploy to Production
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci --legacy-peer-deps

    - name: TypeScript check (quick validation)
      run: npx tsc --noEmit

    - name: Build application

    - name: Run database migrations
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
      run: |
        echo "Running database migrations..."
        npx prisma migrate deploy || npx prisma db push --accept-data-loss || echo "Migration failed, continuing deployment"
      run: npm run build

    - name: Verify database connection string format
      run: |
        echo "Checking DATABASE_URL format..."
        if [ -z "${{ secrets.DATABASE_URL }}" ]; then
          echo "‚ùå DATABASE_URL secret is empty!"
          exit 1
        else
          echo "‚úÖ DATABASE_URL secret is set"
          # Check if it starts with postgresql://
          if [[ "${{ secrets.DATABASE_URL }}" == postgresql://* ]]; then
            echo "‚úÖ DATABASE_URL has correct protocol"
          else
            echo "‚ùå DATABASE_URL does not start with postgresql://"
            exit 1
          fi
          echo "Database URL format validated"
        fi

    - name: Test Cloud SQL instance connectivity
      run: |
        echo "Testing Cloud SQL instance status..."
        gcloud sql instances describe apexsolar-db --format="value(state,databaseVersion)" || echo "Could not describe instance"

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GOOGLE_CLOUD_SERVICE_ACCOUNT_KEY }}
      continue-on-error: false

    - name: Setup Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ env.GOOGLE_CLOUD_PROJECT }}

    - name: Create Artifact Registry repository (if not exists)
      run: |
        gcloud artifacts repositories describe ${{ env.ARTIFACT_REGISTRY_REPO }} \
          --location=${{ env.ARTIFACT_REGISTRY_REGION }} || \
        gcloud artifacts repositories create ${{ env.ARTIFACT_REGISTRY_REPO }} \
          --repository-format=docker \
          --location=${{ env.ARTIFACT_REGISTRY_REGION }} \
          --description="Docker repository for ApexSolar app"

    - name: Configure Docker to use gcloud as credential helper
      run: gcloud auth configure-docker ${{ env.ARTIFACT_REGISTRY_REGION }}-docker.pkg.dev

    - name: Build and push Docker image
      run: |
        IMAGE_URI="${{ env.ARTIFACT_REGISTRY_REGION }}-docker.pkg.dev/${{ env.GOOGLE_CLOUD_PROJECT }}/${{ env.ARTIFACT_REGISTRY_REPO }}/${{ env.SERVICE_NAME }}:${{ github.sha }}"
        docker build -t $IMAGE_URI .
        docker push $IMAGE_URI
        echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV

    - name: Deploy to Cloud Run
      env:
        IMAGE_URI: ${{ env.ARTIFACT_REGISTRY_REGION }}-docker.pkg.dev/${{ env.GOOGLE_CLOUD_PROJECT }}/${{ env.ARTIFACT_REGISTRY_REPO }}/${{ env.SERVICE_NAME }}:${{ github.sha }}
      run: |
        gcloud run deploy ${{ env.SERVICE_NAME }} \
          --image=$IMAGE_URI \
          --region=${{ env.GOOGLE_CLOUD_REGION }} \
          --platform=managed \
          --allow-unauthenticated \
          --add-cloudsql-instances=apexsolar-app:asia-south1:apexsolar-db \
          --set-env-vars="DATABASE_URL=${{ secrets.DATABASE_URL }}" \
          --set-env-vars="NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }}" \
          --set-env-vars="NEXTAUTH_URL=${{ secrets.NEXTAUTH_URL }}" \
          --set-env-vars="GOOGLE_CLOUD_PROJECT_ID=${{ env.GOOGLE_CLOUD_PROJECT }}" \
          --set-env-vars="GCS_BUCKET_NAME=${{ secrets.GCS_BUCKET_NAME }}" \
          --set-env-vars="NODE_ENV=production" \
          --set-env-vars="JWT_SECRET=${{ secrets.JWT_SECRET }}" \
          --set-env-vars="ADMIN_EMAIL=${{ secrets.ADMIN_EMAIL }}" \
          --set-env-vars="ADMIN_PASSWORD=${{ secrets.ADMIN_PASSWORD }}" \
          --memory=2Gi \
          --cpu=2 \
          --min-instances=0 \
          --max-instances=10 \
          --timeout=300

    - name: Get service URL and health check
      run: |
        SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} \
          --region=${{ env.GOOGLE_CLOUD_REGION }} \
          --format='value(status.url)')
        echo "Production deployed at: $SERVICE_URL"
        
        # Basic health check
        sleep 30  # Wait for service to be ready
        echo "Testing health endpoint: $SERVICE_URL/api/health"
        
        # Try health check
        if curl -f -s "$SERVICE_URL/api/health" | grep -q '"status":"healthy"'; then
          echo "‚úÖ Health check passed"
        else
          echo "‚ö†Ô∏è Health check failed, checking service logs..."
          gcloud run services logs read ${{ env.SERVICE_NAME }} --region=${{ env.GOOGLE_CLOUD_REGION }} --limit=10 || echo "Could not fetch logs"
        fi
        
        # Test database connectivity by trying a simple API call
        echo "Testing database connectivity via API..."
        curl -s -X POST "$SERVICE_URL/api/auth/login" \
          -H "Content-Type: application/json" \
          -d '{"email":"test@test.com","password":"test"}' || echo "Login test completed (expected to fail)"
        
        echo "üöÄ Deployment completed! Service available at: $SERVICE_URL"
