name: Comprehensive Testing

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  NODE_VERSION: '18'

jobs:
  # Authentication Tests
  auth-tests:
    name: Authentication Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci --legacy-peer-deps
    
    - name: Make test scripts executable
      run: chmod +x ./tests/*.sh
    
    - name: Run Authentication Tests
      run: ./tests/test-auth-fixes.sh
      env:
        BASE_URL: ${{ secrets.STAGING_URL || 'https://apexsolar-staging-302444603160.asia-south1.run.app' }}

  # Comprehensive System Tests
  system-tests:
    name: System Integration Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci --legacy-peer-deps
    
    - name: Make test scripts executable
      run: chmod +x ./tests/*.sh
    
    - name: Run Comprehensive Tests
      run: ./tests/comprehensive-test-suite.sh
      env:
        BASE_URL: ${{ secrets.STAGING_URL || 'https://apexsolar-staging-302444603160.asia-south1.run.app' }}
    
    - name: Cleanup Test Data
      if: always()
      run: |
        echo "üßπ Cleaning up test data created during testing..."
        # The test suite creates test data with timestamp patterns - clean it up
        ADMIN_PASSWORD="${{ secrets.ADMIN_PASSWORD }}" ./production-cleanup.sh || echo "Cleanup script not available"
      env:
        PROD_BASE_URL: ${{ secrets.STAGING_URL || 'https://apexsolar-staging-302444603160.asia-south1.run.app' }}
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: comprehensive-test-results
        path: |
          test-results.json
          test-report.html

  # Security Tests
  security-tests:
    name: Security Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci --legacy-peer-deps
    
    - name: Make test scripts executable
      run: chmod +x ./tests/*.sh
    
    - name: Run Security Tests
      run: ./tests/security-test-suite.sh
      env:
        BASE_URL: ${{ secrets.STAGING_URL || 'https://apexsolar-staging-302444603160.asia-south1.run.app' }}
    
    - name: Upload security report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-test-results
        path: |
          security-report.json
          security-summary.md

  # Performance Tests
  performance-tests:
    name: Performance & Load Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci --legacy-peer-deps
    
    - name: Make test scripts executable
      run: chmod +x ./tests/*.sh
    
    - name: Run Performance Tests
      run: ./tests/performance-test-suite.sh
      env:
        BASE_URL: ${{ secrets.STAGING_URL || 'https://apexsolar-staging-302444603160.asia-south1.run.app' }}
    
    - name: Upload performance report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: performance-test-results
        path: |
          performance-report.json
          load-test-results.html

  # Test Summary
  test-summary:
    name: Generate Test Summary
    runs-on: ubuntu-latest
    needs: [auth-tests, system-tests, security-tests, performance-tests]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci --legacy-peer-deps
    
    - name: Make test scripts executable
      run: chmod +x ./tests/*.sh
    
    - name: Generate Test Summary
      run: ./tests/test-summary.sh
      env:
        BASE_URL: ${{ secrets.STAGING_URL || 'https://apexsolar-staging-302444603160.asia-south1.run.app' }}
    
    - name: Upload test summary
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-summary-report
        path: |
          test-summary.md
          test-overview.json
    
    - name: Comment Test Results on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          if (fs.existsSync('test-summary.md')) {
            const summary = fs.readFileSync('test-summary.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '## üß™ Test Results\n\n' + summary
            });
          }

  # Notification on Failure
  notify-failure:
    name: Notify on Test Failure
    runs-on: ubuntu-latest
    needs: [auth-tests, system-tests, security-tests, performance-tests]
    if: failure()
    
    steps:
    - name: Notify Team
      run: |
        echo "‚ùå Tests failed in workflow: ${{ github.workflow }}"
        echo "üîó View details: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        # Add your notification logic here (Slack, email, etc.)

  # Post-test staging cleanup
  staging-cleanup:
    name: Clean Staging Environment
    runs-on: ubuntu-latest
    needs: [auth-tests, system-tests, security-tests, performance-tests]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup cleanup environment
      run: |
        chmod +x ./production-cleanup.sh
        echo "üßπ Preparing to clean staging environment after tests"
    
    - name: Run staging cleanup
      env:
        # Use staging URL for cleanup, never production
        BASE_URL: ${{ secrets.STAGING_URL || 'https://apexsolar-staging-302444603160.asia-south1.run.app' }}
        CI_MODE: true
        ADMIN_PASSWORD: ${{ secrets.STAGING_ADMIN_PASSWORD }}
      run: |
        echo "Running cleanup on staging environment: $BASE_URL"
        echo "üîí CI Mode enabled - automated cleanup without prompts"
        ./production-cleanup.sh || echo "‚ö†Ô∏è Cleanup completed with warnings"
    
    - name: Cleanup summary
      run: |
        echo "‚úÖ Staging environment cleanup completed"
        echo "üéØ Test data removed from staging to prevent accumulation"
